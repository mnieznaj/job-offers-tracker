{"version":3,"sources":["store/actions/dashboardActions.js","store/actions/actionTypes.js","Components/Dashboard/OffersList/SingleOffer.js","utils/setAuthHeader.js","Components/Dashboard/OffersList/OffersList.js","Components/Dashboard/Dashboard.js","Components/Dashboard/AddOfferForm/AddOfferForm.js","Components/Dashboard/EditOfferForm/EditOfferForm.js","Components/Login/Login.js","App.js","serviceWorker.js","store/reducers/dashboardHandler.js","index.js"],"names":["displayAddOfferForm","display","type","displayUpdateOfferForm","id","connect","state","currentOfferId","dispatch","setOfferId","showUpdateOffer","show","props","data","offer","_id","title","href","link","rel","target","company","country","city","field","paygrade","favorite","applied","description","stage1","stage2","gotTheJob","onClick","document","getElementById","remove","fetch","method","mode","headers","body","JSON","stringify","then","response","json","console","log","catch","err","token","Accept","OffersList","offers","fetchOffers","localStorage","getItem","setAuthHeader","setState","this","list","map","key","length","Fragment","Component","offersList","setOffersList","formType","userId","displayAddOffer","displayUpdateOffer","className","hide","onSubmit","event","preventDefault","formData","value","checked","getFormData","bind","htmlFor","name","required","rows","cols","setFormData","setToken","setUserToken","placeholder","email","password","undefined","setItem","login","form","style","flexDirection","Boolean","window","location","hostname","match","initialState","userToken","reducer","action","store","createStore","subscribe","getState","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2490d989.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\n\n// export const setFormType = (formType) => {\n//     return {\n//         type: actionTypes.SET_FORM_TYPE,\n//         formType: formType\n//     }\n// }\n\nexport const currentOfferId = (id) => {\n    return {\n        type: actionTypes.CURRENT_OFFER_ID,\n        id: id\n    }\n}\n\nexport const displayAddOfferForm = (display) => {\n    return {\n        type: actionTypes.ADD_OFFER,\n        display: display\n    }\n}\n\nexport const displayUpdateOfferForm = (display, id) => {\n    return {\n        type: actionTypes.UPDATE_OFFER,\n        display: display,\n        id: id\n    }\n}\n\nexport const setOffersList = (offers) => {\n    return {\n        type: actionTypes.SET_OFFERS_LIST,\n        offers: offers\n    }\n}\n\nexport const setUserToken = (token) => {\n    return {\n        type: actionTypes.SET_USER_TOKEN,\n        token: token\n    }\n}","export const SET_OFFERS_LIST = \"SET_OFFERS_LIST\";\nexport const ADD_OFFER = \"ADD_OFFER\";\nexport const UPDATE_OFFER = \"UPDATE_OFFER\";\n\nexport const CURRENT_OFFER_ID = \"CURRENT_OFFER_ID\";\n\n\nexport const SET_FORM_TYPE = \"SET_FORM_TYPE\";\n// export const SHOW_ADD_OFFER = \"SHOW_ADD_OFFER\";\n// export const HIDE_ADD_OFFER = \"HIDE_ADD_OFFER\";\n// export const SHOW_DELETE_OFFER = \"SHOW_DELETE_OFFER\";\n// export const HIDE_DELETE_OFFER = \"HIDE_DELETE_OFFER\";\n\n\nexport const CHANGE_PASSWORD = \"CHANGE_PASSWORD\";\nexport const CHANGE_EMAIL = \"CHANGE_EMAIL\";\n\nexport const SET_USER_TOKEN = \"SET_USER_TOKEN\";","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { currentOfferId, displayUpdateOfferForm } from '../../../store/actions/dashboardActions';\n\n\nconst SingleOffer = (props) => {\n    const data = props.offer;\n\n    const deleteOfferHandler = () => {\n        const id = data._id;\n        document.getElementById(id).remove();\n        \n        fetch(`/delete-offer/${id}`, {\n            method:'DELETE',\n            mode: 'cors',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({id : data._id})\n        })\n        .then(response => response.json())\n        .then(data => console.log(data))\n        .catch(err => console.log(err));\n    }\n\n    return(\n        <tr id={data._id}>\n            <td>{data.title}</td>\n            <td><a href={data.link} rel=\"noopener noreferrer\" target=\"_blank\">Go to the offer</a></td>\n            <td>{data.company}</td>\n            <td>{data.country}</td>\n            <td>{data.city}</td>\n            <td>{data.field}</td>\n            <td>{data.paygrade}</td>\n            <td>{data.favorite ? \"true\" : \"false\"}</td>\n            <td>{data.applied ? \"true\" : \"false\"}</td>\n            <td>{data.description}</td>\n            <td>{data.stage1 ? \"true\" : \"false\"}</td>\n            <td>{data.stage2 ? \"true\" : \"false\"}</td>\n            <td>{data.gotTheJob ? \"true\" : \"false\"}</td>\n            <td onClick={deleteOfferHandler}>x</td>\n            <td onClick={() => {\n                // props.offerFormHandler(\"edit\");\n                // alert(\"click edit\");\n                // props.setFormType(\"edit\");\n                // alert(\"click id\");\n                props.showUpdateOffer(true, data._id)\n                console.log(\"click id: \"+ data._id);\n                props.setOfferId(data._id)\n                }}>edit</td>\n        </tr>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        // formType: state.formType,\n        currentOfferId: state.currentOfferId\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        setOfferId: (id) => dispatch(currentOfferId(id)),\n        showUpdateOffer: (show, id) => dispatch(displayUpdateOfferForm(show, id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleOffer);","export default function(token){return {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'Authorization': `Bearer ${token}`\n  }}","import React, { Component } from 'react';\nimport SingleOffer from './SingleOffer';\nimport './OffersList.css';\n\nimport { connect } from 'react-redux';\nimport { setOffersList } from '../../../store/actions/dashboardActions';\n\nimport setAuthHeader from '../../../utils/setAuthHeader';\n\n// class OffersList extends Component {\n    // state = {offers:[]};\nclass OffersList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {offers: []};\n        this.fetchOffers = () => {\n            const token= localStorage.getItem(\"token\");\n            fetch('/app/get-offer-list', {\n                method: \"GET\",\n                headers: setAuthHeader(token)})\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data);\n                    this.setState({offers: data});\n                })\n                .catch(err => console.log(err));\n        }\n    }\n\n    \n    componentDidMount(){\n            this.fetchOffers()\n        };\n\n    \n    \n        \n    // if(typeof offers === []){\n        // list = offers.map(offer => <SingleOffer offer={offer} key={offer._id} />);\n    // }\n    render(){\n\n        const list = this.state.offers.map(offer => <SingleOffer offer={offer} key={offer._id} />);\n        return (\n            list.length === 0 ? (\n                <React.Fragment>\n                    <button onClick={this.fetchOffers}>Pobierz oferty</button>\n                    <p>No offers.</p>\n                </React.Fragment>\n            ) : (\n                <React.Fragment>\n                    <button onClick={this.fetchOffers}>Pobierz oferty</button>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Link</th>\n                                <th>Company</th>\n                                <th>Country</th>\n                                <th>City</th>\n                                <th>Field</th>\n                                <th>Paygrade</th>\n                                <th>Favorite</th>\n                                <th>Applied</th>\n                                <th>Description</th>\n                                <th>Stage 1</th>\n                                <th>Stage 2</th>\n                                <th>Got the job</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {list}\n                        </tbody>\n                    </table>\n                </React.Fragment>\n            )\n        )\n            } \n}\n\nconst mapStateToProps = state => {\n    return {\n        offersList: state.offersList\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        setOffersList: (offers) => dispatch(setOffersList(offers))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OffersList);","import React from 'react';\nimport './Dashboard.css';\nimport OffersList from './OffersList/OffersList';\n\nimport { connect } from 'react-redux';\nimport { displayAddOfferForm } from '../../store/actions/dashboardActions';\n    \nconst Dashboard = (props) => {\n    \n  return (\n    <div className=\"dashboard\">\n      <h2>Dashboard</h2>\n      <button onClick={() => props.displayAddOffer(true)}>Add new offer</button>\n      <OffersList />\n      {/* <span>{this.state.showAddOffer.toString()}</span><br/>\n      <span>{this.state.formType}</span><br/>\n      <span>{this.state.offerId}</span> */}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    formType: state.formType,\n    userId: state.userId,\n    currentOfferId: state.currentOfferId,\n    displayAddOffer: state.displayAddOffer,\n    displayUpdateOffer: state.displayUpdateOffer,\n    offersList: state.offersList\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n      displayAddOffer: (show) => dispatch(displayAddOfferForm(show))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React from 'react';\nimport './AddOfferForm.css';\n\nimport { connect } from 'react-redux';\nimport { displayAddOfferForm } from '../../../store/actions/dashboardActions';\n\nconst AddOfferForm = (props) => {\n\n    const getFormData = () => {\n        const formData = {};\n        formData.title = document.getElementById('title').value;\n        formData.link = document.getElementById('link').value;\n        formData.company = document.getElementById('company').value;\n        formData.country = document.getElementById('country').value;\n        formData.city = document.getElementById('city').value;\n        formData.field = document.getElementById('field').value;\n        formData.paygrade = document.getElementById('paygrade').value;\n        formData.favorite = document.getElementById('favorite').checked ? true : false;\n        formData.applied = document.getElementById('applied').checked ? true : false;\n        formData.description = document.getElementById('description').value;\n        return formData;\n    }\n\n    const submitFormHandler = event => {\n        event.preventDefault();\n        const data = getFormData();\n        data.userId = \"5f4e08c7d2ef258e7d34b2de\";\n        console.log(data);\n        fetch(\"/add-offer\", {\n            method:'POST',\n            mode: 'cors',\n            headers: {'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"cors\"},\n            body: JSON.stringify(data)\n        })\n        .then(response => response.json())\n        .then(data => console.log(data))\n        .catch(err => console.log(err));\n    }\n\n    return(\n            <div className=\"offer-form\">\n                <div className=\"offer-form__background\" onClick={() => props.displayAddOffer(false)}></div>\n                <form className=\"offer-form__form\" onSubmit={submitFormHandler.bind(this)}>\n                    <label htmlFor=\"title\">Title:</label>\n                    <input type=\"text\" id=\"title\" name=\"title\" required />\n                    <label htmlFor=\"link\">Link:</label>\n                    <input type=\"text\" id=\"link\" name=\"link\" required />\n                    <label htmlFor=\"company\">Company:</label>\n                    <input type=\"text\" id=\"company\" name=\"company\" />\n                    <label htmlFor=\"country\">Country:</label>\n                    <input type=\"text\" id=\"country\" name=\"country\" required />\n                    <label htmlFor=\"city\">City:</label>\n                    <input type=\"text\" id=\"city\" name=\"city\" required />\n                    <label htmlFor=\"field\">Field:</label>\n                    <input type=\"text\" id=\"field\" name=\"field\" />\n                    <label htmlFor=\"paygrade\">Paygrade:</label>\n                    <input type=\"text\" id=\"paygrade\" name=\"paygrade\"  />\n                    <label htmlFor=\"favorite\">Favorite:</label>\n                    <input type=\"checkbox\" id=\"favorite\" name=\"favorite\" />\n                    <label htmlFor=\"applied\">Applied:</label>\n                    <input type=\"checkbox\" id=\"applied\" name=\"applied\" />\n                    <label htmlFor=\"description\">Description:</label>\n                    <textarea id=\"description\" name=\"description\" rows=\"10\" cols=\"30\"></textarea>\n                    <button type=\"submit\">Add Offer</button>\n                </form>\n            </div>\n    )\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        userId: state.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        displayAddOffer: (hide) => dispatch(displayAddOfferForm(hide))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddOfferForm);","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { displayUpdateOfferForm } from '../../../store/actions/dashboardActions';\n\nconst EditOfferForm = (props) => {\n    const id = props.id;\n    console.log(\"id from component input: \"+id);\n\n    const setFormData = (id) => {\n        let formData;\n        console.log(id);\n        fetch(`/get-offer-list/${id}`)\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"data from get offer by id: \" + data);\n                formData = {...data}\n            }).then(() => {\n                document.getElementById('title').value = formData.title;\n                document.getElementById('link').value = formData.link;\n                document.getElementById('company').value = formData.company;\n                document.getElementById('country').value = formData.country;\n                document.getElementById('city').value = formData.city;\n                document.getElementById('field').value = formData.field;\n                document.getElementById('paygrade').value = formData.paygrade;\n                formData.favorite ? document.getElementById('favorite').checked = true :  document.getElementById('favorite').checked = false;\n                formData.applied ? document.getElementById('applied').checked = true : document.getElementById('applied').checked = false;\n                document.getElementById('description').value = formData.description;\n            })\n            .catch(err => console.log(err));  \n    }\n\n    const getFormData = () => {\n        const formData = {};\n        formData.title = document.getElementById('title').value;\n        formData.link = document.getElementById('link').value;\n        formData.company = document.getElementById('company').value;\n        formData.country = document.getElementById('country').value;\n        formData.city = document.getElementById('city').value;\n        formData.field = document.getElementById('field').value;\n        formData.paygrade = document.getElementById('paygrade').value;\n        formData.favorite = document.getElementById('favorite').checked ? true : false;\n        formData.applied = document.getElementById('applied').checked ? true : false;\n        formData.description = document.getElementById('description').value;\n        return formData;\n    }\n\n    const editOfferHandler = (event) => {\n        event.preventDefault();\n        const data = getFormData();\n        \n        fetch(`/edit-offer/${id}`, {\n            method:'PUT',\n            mode: 'cors',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...data})\n        })\n        .then(response => response.json())\n        .then(data => console.log(data))\n        .catch(err => console.log(err));\n    }\n\n    setFormData(id);\n\n    return(\n        <div className=\"offer-form\">\n            <div className=\"offer-form__background\" onClick={() => props.showUpdateOffer(false)}></div>\n            <form className=\"offer-form__form\" onSubmit={editOfferHandler.bind(this)}>\n                <label htmlFor=\"title\">Title:</label>\n                <input type=\"text\" id=\"title\" name=\"title\" required />\n                <label htmlFor=\"link\">Link:</label>\n                <input type=\"text\" id=\"link\" name=\"link\" required />\n                <label htmlFor=\"company\">Company:</label>\n                <input type=\"text\" id=\"company\" name=\"company\" />\n                <label htmlFor=\"country\">Country:</label>\n                <input type=\"text\" id=\"country\" name=\"country\" required />\n                <label htmlFor=\"city\">City:</label>\n                <input type=\"text\" id=\"city\" name=\"city\" required />\n                <label htmlFor=\"field\">Field:</label>\n                <input type=\"text\" id=\"field\" name=\"field\" />\n                <label htmlFor=\"paygrade\">Paygrade:</label>\n                <input type=\"text\" id=\"paygrade\" name=\"paygrade\"  />\n                <label htmlFor=\"favorite\">Favorite:</label>\n                <input type=\"checkbox\" id=\"favorite\" name=\"favorite\" />\n                <label htmlFor=\"applied\">Applied:</label>\n                <input type=\"checkbox\" id=\"applied\" name=\"applied\" />\n                <label htmlFor=\"description\">Description:</label>\n                <textarea id=\"description\" name=\"description\" rows=\"10\" cols=\"30\"></textarea>\n                <button type=\"submit\">Update Offer</button>\n            </form>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        id: state.currentOfferId\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        showUpdateOffer: (show) => dispatch(displayUpdateOfferForm(show))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditOfferForm);","import React from 'react';\nimport './Login.css';\n\nimport {connect} from 'react-redux';\nimport { setUserToken } from '../../store/actions/dashboardActions';\n\nconst Login = (props) => {\n    const login = (event) => {\n        event.preventDefault();\n        const email = document.getElementById(\"email\").value;\n        const password = document.getElementById(\"password\").value;\n        \n        const data = {\n            email,\n            password\n        }\n        console.log(data);\n        fetch(\"/users/login-user\", {\n            method:'POST',\n            mode: 'cors',\n            headers: {'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\"},\n            body: JSON.stringify(data)\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data.token);\n            props.setToken(data.token);\n            return data\n        })\n        .then(data => {\n            if(!localStorage.getItem(\"token\") || localStorage.getItem(\"token\") === undefined){\n                localStorage.setItem(\"token\", data.token);\n            }\n            return data\n        })\n        .then(data => console.log(data))\n        .catch(err => console.log(err)); //redirect on success\n    }\n    return(\n        <div className=\"login\">\n            <h2>Login</h2>\n            <form className=\"login-form\">\n                <label>Email</label>\n                <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter Email\"></input>\n                <label>Password</label>\n                <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter Password\"></input>\n                <button type=\"Submit\" onClick={(event) => login(event)}>Login</button>\n            </form>\n            <p>Don't have an acount? <a href=\"/#\">Register Now!</a></p>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setToken: (token) => dispatch(setUserToken(token))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Login);","import React from 'react';\n\nimport {connect} from 'react-redux';\n\nimport './App.css';\nimport Dashboard from './Components/Dashboard/Dashboard';\nimport AddOfferForm from './Components/Dashboard/AddOfferForm/AddOfferForm';\nimport EditOfferForm from './Components/Dashboard/EditOfferForm/EditOfferForm';\n\n// import Register from './Components/Login/Register';\nimport Login from './Components/Login/Login';\n\nconst App = (props) => {\n\n\n  // useEffect((props) => {\n  //   fetch('/get-offer-list')\n  //       .then(response => response.json())\n  //       .then(data => {\n  //           console.log(\"data from app.js fetch\" + data);\n  //           props.setOffersList(data);\n  //           // props.offersList = data;\n  //           // offers = data;\n  //       })\n  //       .catch(err => console.log(err));\n  // },[]);\n\n    let form;\n    if(props.displayAddOffer){\n      form = <AddOfferForm />;\n    } else if (props.displayUpdateOffer){\n      form = <EditOfferForm />;\n    } else {\n      form = null;\n    }\n\n\n    return (\n      <div className=\"App\">\n        {form}\n        <div style={{display : \"flex\", flexDirection : \"row\"}}>\n          <Login />\n          {/* <Register /> */}\n        </div>\n        <Dashboard />\n      </div>\n    );\n  // }\n}\n\nconst mapStateToProps = state => {\n  return {\n      displayAddOffer: state.displayAddOffer,\n      displayUpdateOffer: state.displayUpdateOffer\n  }\n}\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    offersList: [],\n    displayAddOffer: false,\n    displayUpdateOffer: false,\n    userId: \"5f4e08c7d2ef258e7d34b2de\",\n    userToken: localStorage.getItem(\"token\") ? localStorage.getItem(\"token\") : null,\n    currentOfferId: null\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type){\n        case actionTypes.SET_OFFERS_LIST:\n            return {\n                ...state,\n                offersList: action.offers //TERAZ JUŻ CHYBA DZIAŁA RENDEROWANIE PRZEZ REDUXA TRZEBA SPRAWDZIĆ\n            };\n        case actionTypes.ADD_OFFER:\n            return {\n                ...state,\n                displayAddOffer: action.display\n            };\n        case actionTypes.UPDATE_OFFER:\n            return {\n                ...state,\n                displayUpdateOffer: action.display,\n                currentOfferId: action.id\n            };\n        // case actionTypes.DELETE_OFFER:\n        //     return 0;\n        case actionTypes.CURRENT_OFFER_ID:\n            return {\n                ...state,\n                currentOfferId: action.id\n            };\n        case actionTypes.SET_FORM_TYPE:\n            return {\n                ...state,\n                formType: action.formType\n            };\n        case actionTypes.SET_USER_TOKEN:\n            return {\n                ...state,\n                userToken: action.token\n            }\n        // case actionTypes.SHOW_ADD_OFFER:\n        //     return {\n        //         ...state,\n        //         displayAddOffer: true\n        //     }\n        // case actionTypes.HIDE_ADD_OFFER:\n        //     return {\n        //         ...state,\n        //         displayAddOffer: false\n        //     }\n        // case actionTypes.SHOW_UPDATE_OFFER:\n        //     return {\n        //         ...state,\n        //         displayUpdateOffer: true\n        //     }\n        // case actionTypes.HIDE_UPDATE_OFFER:\n        //     return {\n        //         ...state,\n        //         displayUpdateOffer: false\n        //     }\n            \n    }\n    return state;\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// REDUX\nimport { createStore } from 'redux';\nimport reducer from './store/reducers/dashboardHandler';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducer);\n\nstore.subscribe(() => {\n  console.log(store.getState());\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}